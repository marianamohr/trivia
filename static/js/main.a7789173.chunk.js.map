{"version":3,"sources":["reducers/user.js","actions/types.js","reducers/game.js","reducers/time.js","reducers/index.js","store/index.js","actions/index.js","services/api.jsx","pages/Login.jsx","Components/Header.jsx","Components/Questions.jsx","Components/Loading.jsx","Components/Controller.jsx","Components/Timer.jsx","pages/Game.jsx","pages/Settings.jsx","pages/Feedback.jsx","pages/Ranking.jsx","serviceWorker.js","index.js","App.js"],"names":["INITIAL_STATE","token","name","gravatar","gravatarEmail","score","assertions","user","state","type","payload","questionScore","gameData","settings","category","difficult","game","action","data","isTimerPaused","currentTime","reestart","time","rootReducer","combineReducers","composeWithDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","length","compose","store","createStore","applyMiddleware","thunk","actionFetchToken","dispatch","a","async","fetch","fetchApi","json","fetchData","apiTokenRequest","then","localStorage","setItem","actionFetchGameData","results","apiQuestionsRequest","Login","props","nome","email","redirect","handleChange","bind","handleSubmit","target","value","this","setState","e","preventDefault","getToken","saveUser","md5","toString","player","JSON","stringify","to","className","alt","src","onSubmit","htmlFor","id","data-testid","onChange","placeholder","disabled","React","Component","connect","actionSaveUser","Header","Questions","onClick","calculateScore","savePlayerInfos","changeText","stopTimer","questionData","saveScore","difficulty","newPlayer","parse","getItem","newInfos","text","__html","question","newAnswers","correct_answer","incorrect_answers","dangerouslySetInnerHTML","sort","map","item","index","key","Loading","Controller","handleNextQuestion","count","fetchGameData","picture","playerData","playerArr","start","resetGame","handleLocalStora","prev","startTime","Timer","handleTimer","clearInterval","timer","decrementTime","setInterval","Game","listDifficult","listType","Settings","saveSettings","actionSetConfiguration","Feedback","Ranking","arrRankingPlayers","handleRanking","localRanking","b","slice","Boolean","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7789173.chunk.js","sourcesContent":["import { FETCH_TOKEN, SAVE_USER, SAVE_SCORE } from '../actions/types';\n\nconst INITIAL_STATE = {\n  token: '',\n  name: '',\n  gravatar: '',\n  gravatarEmail: '',\n  score: 0,\n  assertions: 0,\n};\n\nconst user = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case FETCH_TOKEN:\n    return {\n      ...state,\n      token: payload.token,\n    };\n  case SAVE_USER:\n    return {\n      ...state,\n      name: payload.user.name,\n      gravatarEmail: payload.user.gravatarEmail,\n      assertions: payload.user.assertions,\n      score: payload.user.score,\n      gravatar: `https://www.gravatar.com/avatar/${payload.gravatar}`,\n    };\n  case SAVE_SCORE:\n    return {\n      ...state,\n      score: state.score + payload.questionScore,\n      assertions: state.assertions + 1,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","export const FETCH_TOKEN = 'FETCH_TOKEN';\nexport const FETCH_QUESTIONS = 'FETCH_QUESTIONS';\nexport const SAVE_USER = 'SAVE_USER';\nexport const FETCH_GAME_DATA = 'FETCH_GAME_DATA';\nexport const PAUSE_TIME = 'PAUSE_TIME';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SAVE_SCORE = 'SAVE_SCORE';\nexport const REESTART_TIME = 'REESTART_TIME';\nexport const RESET_GAME_DATA = 'RESET_GAME_DATA';\nexport const SET_CONFIGURATION = 'SET_CONFIGURATION';\n","import { FETCH_GAME_DATA, RESET_GAME_DATA, SET_CONFIGURATION } from '../actions/types';\n\nconst INITIAL_STATE = {\n  gameData: [],\n  settings: {\n    category: 20,\n    difficult: '',\n    type: '',\n  },\n};\n\nconst game = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case FETCH_GAME_DATA:\n    return {\n      ...state,\n      gameData: [...action.payload.data],\n    };\n\n  case RESET_GAME_DATA:\n    return {\n      ...state,\n      gameData: [],\n    };\n  case SET_CONFIGURATION:\n    return {\n      ...state,\n      settings: action.payload.settings,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","import { PAUSE_TIME, SET_TIMER, REESTART_TIME } from '../actions/types';\n\nconst INITIAL_STATE = {\n  isTimerPaused: false,\n  currentTime: 30,\n  reestart: false,\n};\n\nconst time = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case PAUSE_TIME:\n    return {\n      ...state,\n      isTimerPaused: true,\n      reestart: false,\n    };\n  case SET_TIMER:\n    return {\n      ...state,\n      currentTime: state.currentTime - 1,\n      reestart: false,\n    };\n  case REESTART_TIME:\n    return {\n      ...state,\n      reestart: !state.reestart,\n      currentTime: 30,\n      isTimerPaused: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default time;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport game from './game';\nimport time from './time';\n\nconst rootReducer = combineReducers({\n  user,\n  game,\n  time,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst composeWithDevTools = typeof window !== 'undefined'\n&& window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  : (...args) => {\n    if (args.length === 0) return undefined;\n    if (typeof args[0] === 'object') return compose;\n    return compose(...args);\n  };\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import {\n  FETCH_TOKEN,\n  SAVE_USER,\n  FETCH_GAME_DATA,\n  PAUSE_TIME,\n  SET_TIMER,\n  SAVE_SCORE,\n  REESTART_TIME,\n  RESET_GAME_DATA,\n  SET_CONFIGURATION,\n} from './types';\nimport { apiTokenRequest, apiQuestionsRequest } from '../services/api';\n\nexport const actionFetchToken = () => (dispatch) => apiTokenRequest().then((token) => {\n  localStorage.setItem('token', token);\n  dispatch({\n    type: FETCH_TOKEN,\n    payload: {\n      token,\n    },\n  });\n});\n\nexport const actionFetchGameData = (token, settings) => (dispatch) => (\n  apiQuestionsRequest(token, settings)\n    .then((data) => dispatch({\n      type: FETCH_GAME_DATA,\n      payload: {\n        data,\n      },\n    })));\n\nexport const actionSaveUser = (user, gravatar) => ({\n  type: SAVE_USER,\n  payload: {\n    user,\n    gravatar,\n  },\n});\n\nexport const pauseTime = () => ({\n  type: PAUSE_TIME,\n});\n\nexport const setTimer = () => ({\n  type: SET_TIMER,\n});\n\nexport const actionSaveScore = (questionScore) => ({\n  type: SAVE_SCORE,\n  payload: {\n    questionScore,\n  },\n});\n\nexport const actionStart = () => ({\n  type: REESTART_TIME,\n});\n\nexport const actionResetGameData = () => ({\n  type: RESET_GAME_DATA,\n});\n\nexport const actionSetConfiguration = (settings) => ({\n  type: SET_CONFIGURATION,\n  payload: {\n    settings,\n  },\n});\n","export const apiTokenRequest = async () => {\n  const fetchApi = await fetch(\n    'https://opentdb.com/api_token.php?command=request',\n  );\n\n  const fetchData = await fetchApi.json();\n  const { token } = await fetchData;\n  return token;\n};\n\nexport const apiQuestionsRequest = async (token, settings) => {\n  const { category, difficult, type } = settings;\n  const fetchApi = await fetch(\n    `https://opentdb.com/api.php?amount=5&category=${category}&difficulty=${difficult}&type=${type}&token=${token}`,\n  );\n\n  const data = await fetchApi.json();\n  return data.results;\n};\n","import React from 'react';\nimport '../Style/Login.css';\nimport PropTypes from 'prop-types';\nimport { Redirect, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { actionFetchToken, actionSaveUser } from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nome: '',\n      email: '',\n      redirect: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange({ target: { value, name } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    const { nome, email } = this.state;\n    const { getToken, saveUser } = this.props;\n    getToken();\n    const gravatar = md5(email).toString();\n    const state = {\n      player: { name: nome, assertions: 0, score: 0, gravatarEmail: email },\n    };\n    saveUser(state.player, gravatar);\n    localStorage.setItem('state', JSON.stringify(state));\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { nome, email, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/game\" />;\n\n    return (\n      <div className=\"formContainer\">\n        <Link \n        className=\"btn-ranking\" \n        to=\"/ranking\"> \n        <img \n        className=\"ranking-icon\"\n        alt=\"podium\"  \n        src=\"https://image.flaticon.com/icons/png/512/1277/1277835.png\"/>\n        </Link>\n        <form onSubmit={ this.handleSubmit }>\n          <h1 className=\"name-triva\">Mythology Trivia</h1>\n          <label className=\"nome\" htmlFor=\"input-player-name\">\n            <input\n              name=\"nome\"\n              value={ nome }\n              id=\"input-player-name\"\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              onChange={ this.handleChange }\n              placeholder=\"Name\"\n            />\n          </label>\n          <label htmlFor=\"input-gravatar-email\">\n            <input\n              name=\"email\"\n              value={ email }\n              id=\"input-gravatar-email\"\n              type=\"email\"\n              data-testid=\"input-gravatar-email\"\n              onChange={ this.handleChange }\n              placeholder=\"Email\"\n            />\n          </label>\n          <button\n            className=\"btn-play\"\n            type=\"submit\"\n            data-testid=\"btn-play\"\n            disabled={ !nome.length || !email.length }\n          >\n            Play\n          </button>\n        </form>\n        <Link\n          className=\"btn-settings\"\n          data-testid=\"btn-settings\"\n          to=\"/settings\"\n        >\n          <img\n            className=\"settings-icon\"\n            src=\"https://img-premium.flaticon.com/png/512/484/premium/484562.png?token=exp=1623959011~hmac=43114dfe0afda660ab124549cc248fc6\"\n            alt=\"settings\"\n          />\n        </Link>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  saveUser: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.user.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(actionFetchToken()),\n  saveUser: (user, gravatar) => dispatch(actionSaveUser(user, gravatar)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport '../Style/Header.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  render() {\n    const { gravatar, name, score } = this.props;\n    return (\n      <header>\n        <img\n          data-testid=\"header-profile-picture\"\n          alt=\"user login\"\n          src={ gravatar }\n        />\n        <h4\n          data-testid=\"header-player-name\"\n          className=\"player\"\n        >\n          Player:\n          {' '}\n          { name }\n        </h4>\n\n        <h4\n          className=\"score\"\n          data-testid=\"header-score\"\n        >\n          Score:\n          {' '}\n          { score }\n        </h4>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  gravatar: state.user.gravatar,\n  score: state.user.score,\n});\n\nHeader.propTypes = {\n  gravatar: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport '../Style/Questions.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionSaveScore, pauseTime } from '../actions';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.savePlayerInfos = this.savePlayerInfos.bind(this);\n    this.changeText = this.changeText.bind(this);\n  }\n\n  onClick({ target }) {\n    const { stopTimer } = this.props;\n    stopTimer();\n    if (target.name === 'correct-answer') {\n      this.calculateScore();\n    }\n  }\n\n  calculateScore() {\n    const { questionData, currentTime, saveScore } = this.props;\n    let difficult = 0;\n    const hardValue = 3;\n    const baseValue = 10;\n    switch (questionData.difficulty) {\n    case ('hard'):\n      difficult = hardValue;\n      break;\n    case ('medium'):\n      difficult = 2;\n      break;\n    case ('easy'):\n      difficult = 1;\n      break;\n    default:\n      difficult = 0;\n      break;\n    }\n    const questionScore = baseValue + (currentTime * difficult);\n    saveScore(questionScore);\n    this.savePlayerInfos(questionScore);\n  }\n\n  savePlayerInfos(questionScore) {\n    const newPlayer = JSON.parse(localStorage.getItem('state'));\n    const { score, assertions } = newPlayer.player;\n    const newInfos = {\n      player: {\n        ...newPlayer.player,\n        score: score + questionScore,\n        assertions: assertions + 1,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(newInfos));\n  }\n\n  changeText(text) {\n    return { __html: text };\n  }\n\n  render() {\n    const { questionData, isTimerPaused, currentTime } = this.props;\n    const { question } = questionData;\n    const newAnswers = [questionData.correct_answer, ...questionData.incorrect_answers];\n    return (\n      <div className=\"question\">\n        {/* <h4 data-testid=\"question-category\">{category}</h4> */}\n        <h3\n          className=\"question-text\"\n          data-testid=\"question-text\"\n          dangerouslySetInnerHTML={ this.changeText(question) }\n        />\n\n        <div className=\"buttons\">\n          {newAnswers.sort().map((item, index) => (item === questionData.correct_answer ? (\n            <button\n              key={ index }\n              type=\"button\"\n              name=\"correct-answer\"\n              data-testid=\"correct-answer\"\n              className={ isTimerPaused ? 'correct-answer' : '' }\n              onClick={ this.onClick }\n              disabled={ isTimerPaused || currentTime === 0 }\n              dangerouslySetInnerHTML={ this.changeText(item) }\n            />\n\n          ) : (\n            <button\n              key={ index }\n              type=\"button\"\n              name=\"wrong-answer\"\n              data-testid={ `wrong-answer-${index}` }\n              className={ isTimerPaused ? 'wrong-answer' : '' }\n              onClick={ this.onClick }\n              disabled={ isTimerPaused || currentTime === 0 }\n            >\n              {item}\n            </button>\n          )\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  questionData: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf.isRequired,\n    difficulty: PropTypes.string.isRequired,\n  }).isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  saveScore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  stopTimer: () => dispatch(pauseTime()),\n  saveScore: (score) => dispatch(actionSaveScore(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Loading...</h1>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport '../Style/Controller.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { actionFetchGameData,\n  pauseTime,\n  actionStart,\n  actionResetGameData } from '../actions';\nimport Questions from './Questions';\nimport Loading from './Loading';\n\nclass Controller extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNextQuestion = this.handleNextQuestion.bind(this);\n\n    this.state = {\n      count: 0,\n      redirect: false,\n    };\n  }\n\n  componentDidMount() {\n    const { fetchGameData, token, settings } = this.props;\n    fetchGameData(token, settings);\n  }\n\n  handleLocalStora() {\n    const { name, gravatar, score } = this.props;\n    const newPlayer = { name, score, picture: gravatar };\n    const playerData = localStorage.getItem('ranking');\n\n    if (playerData) {\n      let playerArr = JSON.parse(playerData);\n      playerArr = [...playerArr, newPlayer];\n      localStorage.setItem('ranking', JSON.stringify(playerArr));\n    } else {\n      const playerArr = [newPlayer];\n      localStorage.setItem('ranking', JSON.stringify(playerArr));\n    }\n  }\n\n  handleNextQuestion() {\n    const { start, resetGame } = this.props;\n    const { count } = this.state;\n    const NUMBER = 4;\n\n    if (count === NUMBER) {\n      resetGame();\n      this.handleLocalStora();\n      this.setState({ redirect: true });\n    }\n\n    this.setState((prev) => ({\n      count: prev.count + 1,\n    }));\n\n    start();\n  }\n\n  render() {\n    const { gameData, currentTime, isTimerPaused } = this.props;\n    const { count, startTime, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/feedback\" />;\n\n    return (\n      <div className=\"controller\">\n        {!gameData.length ? (\n          <Loading />\n        ) : (\n          <>\n            {/* <Timer count={ count } /> */}\n            <Questions questionData={ gameData[count] } startTime={ startTime } />\n          </>\n        )}\n        {(currentTime === 0 || isTimerPaused) && (\n          <button\n            className=\"btn-next\"\n            onClick={ this.handleNextQuestion }\n            type=\"button\"\n            data-testid=\"btn-next\"\n          >\n            Next\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nController.propTypes = {\n  fetchGameData: PropTypes.func.isRequired,\n  gameData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  token: PropTypes.string.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  start: PropTypes.func.isRequired,\n  resetGame: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatar: PropTypes.string.isRequired,\n  settings: PropTypes.shape(Object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  gameData: state.game.gameData,\n  token: state.user.token,\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime,\n  name: state.user.name,\n  score: state.user.score,\n  gravatar: state.user.gravatar,\n  settings: state.game.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchGameData: (token, settings) => dispatch(actionFetchGameData(token, settings)),\n  stopTimer: () => dispatch(pauseTime()),\n  start: () => dispatch(actionStart()),\n  resetGame: () => dispatch(actionResetGameData()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controller);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setTimer } from '../actions';\n\nclass Timer extends Component {\n  componentDidMount() {\n    this.handleTimer();\n  }\n\n  componentDidUpdate() {\n    const { currentTime, isTimerPaused, reestart } = this.props;\n    // const maxQuestions = 4;\n    if (currentTime === 0 || isTimerPaused) {\n      clearInterval(this.timer);\n    }\n\n    if (reestart) {\n      this.handleTimer();\n    }\n  }\n\n  handleTimer() {\n    const { decrementTime } = this.props;\n    const oneSec = 1000;\n    this.timer = setInterval(() => {\n      decrementTime();\n    }, oneSec);\n  }\n\n  render() {\n    const { currentTime } = this.props;\n\n    return (\n      <div className=\"timer\">\n        Timer:\n        {currentTime}\n      </div>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentTime: state.time.currentTime,\n  isTimerPaused: state.time.isTimerPaused,\n  reestart: state.time.reestart,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  decrementTime: () => dispatch(setTimer()),\n});\n\nTimer.propTypes = {\n  currentTime: PropTypes.number.isRequired,\n  decrementTime: PropTypes.func.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  reestart: PropTypes.bool.isRequired,\n  // count: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import React from 'react';\nimport '../Style/Game.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header';\nimport Controller from '../Components/Controller';\nimport Timer from '../Components/Timer';\n\nclass Game extends React.Component {\n  render() {\n    const { gameData } = this.props;\n    return (\n      <>\n        <Header />\n        <main>\n          <div className=\"box-question\">\n            { gameData.length ? <Timer /> : null}\n            <Controller />\n          </div>\n        </main>\n      </>\n    );\n  }\n}\n\nGame.propTypes = {\n  gameData: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  gameData: state.game.gameData,\n});\n\nexport default connect(mapStateToProps, null)(Game);\n","import React, { Component } from 'react';\nimport '../Style/Settings.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { actionSetConfiguration } from '../actions/index';\n\nconst INITIAL_STATE = {\n  category: 20,\n  difficult: '',\n  type: '',\n};\n// const listCategory = [\n//   { id: 0, name: 'Any Category', value: '' },\n//   { id: 11, name: 'Movies', value: 11 },\n//   { id: 20, name: 'Mitology', value: 20 },\n//   { id: 9, name: 'General Knowledge', value: 9 },\n//   { id: 18, name: 'Computers', value: 18 },\n//   { id: 21, name: 'Sports', value: 21 },\n// ];\n\nconst listDifficult = [\n  { id: 0, name: 'random', value: '' },\n  { id: 1, name: 'easy', value: 'easy' },\n  { id: 2, name: 'medium', value: 'medium' },\n  { id: 3, name: 'hard', value: 'hard' },\n];\nconst listType = [\n  { id: 0, name: 'random', value: '' },\n  { id: 1, name: 'boolean', value: 'boolean' },\n  { id: 2, name: 'multiple', value: 'multiple' },\n];\nclass Settings extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ...INITIAL_STATE,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { saveSettings } = this.props;\n    return (\n      <div className=\"settings\">\n        <div className=\"box-settings\">\n          <h1 data-testid=\"settings-title\">Settings</h1>\n          {/* <select name=\"category\" onChange={ this.handleChange }>\n          {listCategory.map((category) => (\n            <option key={ category.id } value={ category.value }>{category.name}</option>\n          ))}\n        </select> */}\n          <div className=\"options\">\n            <div className=\"box-intern\">\n              <label htmlFor=\"difficult\">\n                Difficult:\n                <select name=\"difficult\" onChange={ this.handleChange }>\n                  {listDifficult.map((difficult) => (\n                    <option\n                      key={ difficult.id }\n                      value={ difficult.value }\n                    >\n                      {difficult.name}\n                    </option>))}\n                </select>\n              </label>\n            </div>\n            <div className=\"box-intern\">\n              <label htmlFor=\"type\">\n                Type:\n                <select name=\"type\" onChange={ this.handleChange }>\n                  {listType.map((type) => (\n                    <option key={ type.id } value={ type.value }>{type.name}</option>))}\n                </select>\n              </label>\n            </div>\n            <Link to=\"/\">\n              <button\n                className=\"btn-save-settings\"\n                type=\"button\"\n                onClick={ () => { saveSettings(this.state); } }\n              >\n                Save Settings\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  saveSettings: PropTypes.func.isRequired,\n\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveSettings: (settings) => dispatch(actionSetConfiguration(settings)),\n});\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react';\nimport '../Style/Feedback.css';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header';\n\nclass Feedback extends Component {\n  render() {\n    const { assertions, score } = this.props;\n    const minAssertions = 3;\n    return (\n      <div className=\"feedback\">\n        <Header />\n        <div className=\"box-feedback\">\n          <h1 data-testid=\"feedback-text\">Feedback</h1>\n          {assertions >= minAssertions\n            ? <h2 data-testid=\"feedback-text\">Mandou bem!</h2>\n            : <h2 data-testid=\"feedback-text\">Podia ser melhor...</h2>}\n          <h2 data-testid=\"feedback-total-score\">\n            Score:\n            {' '}\n            {score}\n          </h2>\n          <h2 data-testid=\"feedback-total-question\">\n            Assertions:\n            {' '}\n            {assertions}\n          </h2>\n          <div className=\"feedback-btn-box\">\n            <Link to=\"/\">\n              <button\n                className=\"btn-feedback\"\n                type=\"button\"\n                data-testid=\"btn-play-again\"\n              >\n                Play Again\n              </button>\n            </Link>\n\n            <Link to=\"/ranking\">\n              <button\n                className=\"btn-feedback\"\n                type=\"button\"\n                data-testid=\"btn-ranking\"\n              >\n                Ranking\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.user.assertions,\n  score: state.user.score,\n});\nexport default connect(mapStateToProps, null)(Feedback);\n","import React from 'react';\nimport '../Style/Ranking.css';\nimport { Link } from 'react-router-dom';\n\nclass Ranking extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      arrRankingPlayers: [],\n    };\n  }\n\n  componentDidMount() {\n    this.handleRanking();\n  }\n\n  handleRanking() {\n    // const { arrRankingPlayers } = this.state;\n    const localRanking = JSON.parse(localStorage.getItem('ranking'));\n    if (localRanking) {\n      localRanking.sort((a, b) => b.score - a.score);\n      this.setState({\n        arrRankingPlayers: localRanking,\n      });\n    }\n  }\n\n  render() {\n    const { arrRankingPlayers } = this.state;\n    const maxPositionsRanking = 3;\n    return (\n      <div className=\"ranking\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        {arrRankingPlayers.slice(0, maxPositionsRanking).map((item, index) => (\n          <div className={ `position-ranking ranking-${index + 1}` } key={ index }>\n            <img src={ item.picture } alt={ item.picture } />\n            <p data-testid={ `player-name-${index}` }>{item.name}</p>\n            <p data-testid={ `player-score-${index}` }>{item.score}</p>\n          </div>\n        ))}\n        <Link className=\"btn-back\" data-testid=\"btn-go-home\" to=\"/\">Back</Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './Style/App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/game\" component={ Game } />\n        <Route exact path=\"/settings\" component={ Settings } />\n        <Route exact path=\"/feedback\" component={ Feedback } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}