{"ast":null,"code":"var _jsxFileName = \"/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Controller.jsx\";\nimport React, { Component } from 'react';\nimport '../Style/Controller.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { actionFetchGameData, pauseTime, actionStart, actionResetGameData } from '../actions';\nimport Questions from './Questions';\nimport Loading from './Loading';\n\nclass Controller extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNextQuestion = this.handleNextQuestion.bind(this);\n    this.state = {\n      count: 0,\n      redirect: false\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          fetchGameData = _this$props.fetchGameData,\n          token = _this$props.token,\n          settings = _this$props.settings;\n    fetchGameData(token, settings);\n  }\n\n  handleLocalStora() {\n    const _this$props2 = this.props,\n          name = _this$props2.name,\n          gravatar = _this$props2.gravatar,\n          score = _this$props2.score;\n    const newPlayer = {\n      name,\n      score,\n      picture: gravatar\n    };\n    const playerData = localStorage.getItem('ranking');\n\n    if (playerData) {\n      let playerArr = JSON.parse(playerData);\n      playerArr = [...playerArr, newPlayer];\n      localStorage.setItem('ranking', JSON.stringify(playerArr));\n    } else {\n      const playerArr = [newPlayer];\n      localStorage.setItem('ranking', JSON.stringify(playerArr));\n    }\n  }\n\n  handleNextQuestion() {\n    const _this$props3 = this.props,\n          start = _this$props3.start,\n          resetGame = _this$props3.resetGame;\n    const count = this.state.count;\n    const NUMBER = 4;\n\n    if (count === NUMBER) {\n      resetGame();\n      this.handleLocalStora();\n      this.setState({\n        redirect: true\n      });\n    }\n\n    this.setState(prev => ({\n      count: prev.count + 1\n    }));\n    start();\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          gameData = _this$props4.gameData,\n          currentTime = _this$props4.currentTime,\n          isTimerPaused = _this$props4.isTimerPaused;\n    const _this$state = this.state,\n          count = _this$state.count,\n          startTime = _this$state.startTime,\n          redirect = _this$state.redirect;\n    if (redirect) return React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: \"controller\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, !gameData.length ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, null, React.createElement(Questions, {\n      questionData: gameData[count],\n      startTime: startTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), (currentTime === 0 || isTimerPaused) && React.createElement(\"button\", {\n      className: \"btn-next\",\n      onClick: this.handleNextQuestion,\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Next\"));\n  }\n\n}\n\nController.propTypes = {\n  fetchGameData: PropTypes.func.isRequired,\n  gameData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  token: PropTypes.string.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  start: PropTypes.func.isRequired,\n  resetGame: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatar: PropTypes.string.isRequired,\n  settings: PropTypes.shape(Object).isRequired\n};\n\nconst mapStateToProps = state => ({\n  gameData: state.game.gameData,\n  token: state.user.token,\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime,\n  name: state.user.name,\n  score: state.user.score,\n  gravatar: state.user.gravatar,\n  settings: state.game.settings\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchGameData: (token, settings) => dispatch(actionFetchGameData(token, settings)),\n  stopTimer: () => dispatch(pauseTime()),\n  start: () => dispatch(actionStart()),\n  resetGame: () => dispatch(actionResetGameData())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controller);","map":{"version":3,"sources":["/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Controller.jsx"],"names":["React","Component","connect","PropTypes","Redirect","actionFetchGameData","pauseTime","actionStart","actionResetGameData","Questions","Loading","Controller","constructor","props","handleNextQuestion","bind","state","count","redirect","componentDidMount","fetchGameData","token","settings","handleLocalStora","name","gravatar","score","newPlayer","picture","playerData","localStorage","getItem","playerArr","JSON","parse","setItem","stringify","start","resetGame","NUMBER","setState","prev","render","gameData","currentTime","isTimerPaused","startTime","length","propTypes","func","isRequired","arrayOf","object","string","bool","number","shape","Object","mapStateToProps","game","user","time","mapDispatchToProps","dispatch","stopTimer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,mBAAT,EACEC,SADF,EAEEC,WAFF,EAGEC,mBAHF,QAG6B,YAH7B;AAIA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,UAAN,SAAyBV,SAAzB,CAAmC;AACjCW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,wBACyB,KAAKN,KAD9B;AAAA,UACVO,aADU,eACVA,aADU;AAAA,UACKC,KADL,eACKA,KADL;AAAA,UACYC,QADZ,eACYA,QADZ;AAElBF,IAAAA,aAAa,CAACC,KAAD,EAAQC,QAAR,CAAb;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AAAA,yBACiB,KAAKV,KADtB;AAAA,UACTW,IADS,gBACTA,IADS;AAAA,UACHC,QADG,gBACHA,QADG;AAAA,UACOC,KADP,gBACOA,KADP;AAEjB,UAAMC,SAAS,GAAG;AAAEH,MAAAA,IAAF;AAAQE,MAAAA,KAAR;AAAeE,MAAAA,OAAO,EAAEH;AAAxB,KAAlB;AACA,UAAMI,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAnB;;AAEA,QAAIF,UAAJ,EAAgB;AACd,UAAIG,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAhB;AACAG,MAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAeL,SAAf,CAAZ;AACAG,MAAAA,YAAY,CAACK,OAAb,CAAqB,SAArB,EAAgCF,IAAI,CAACG,SAAL,CAAeJ,SAAf,CAAhC;AACD,KAJD,MAIO;AACL,YAAMA,SAAS,GAAG,CAACL,SAAD,CAAlB;AACAG,MAAAA,YAAY,CAACK,OAAb,CAAqB,SAArB,EAAgCF,IAAI,CAACG,SAAL,CAAeJ,SAAf,CAAhC;AACD;AACF;;AAEDlB,EAAAA,kBAAkB,GAAG;AAAA,yBACU,KAAKD,KADf;AAAA,UACXwB,KADW,gBACXA,KADW;AAAA,UACJC,SADI,gBACJA,SADI;AAAA,UAEXrB,KAFW,GAED,KAAKD,KAFJ,CAEXC,KAFW;AAGnB,UAAMsB,MAAM,GAAG,CAAf;;AAEA,QAAItB,KAAK,KAAKsB,MAAd,EAAsB;AACpBD,MAAAA,SAAS;AACT,WAAKf,gBAAL;AACA,WAAKiB,QAAL,CAAc;AAAEtB,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD;;AAED,SAAKsB,QAAL,CAAeC,IAAD,KAAW;AACvBxB,MAAAA,KAAK,EAAEwB,IAAI,CAACxB,KAAL,GAAa;AADG,KAAX,CAAd;AAIAoB,IAAAA,KAAK;AACN;;AAEDK,EAAAA,MAAM,GAAG;AAAA,yBAC0C,KAAK7B,KAD/C;AAAA,UACC8B,QADD,gBACCA,QADD;AAAA,UACWC,WADX,gBACWA,WADX;AAAA,UACwBC,aADxB,gBACwBA,aADxB;AAAA,wBAEgC,KAAK7B,KAFrC;AAAA,UAECC,KAFD,eAECA,KAFD;AAAA,UAEQ6B,SAFR,eAEQA,SAFR;AAAA,UAEmB5B,QAFnB,eAEmBA,QAFnB;AAGP,QAAIA,QAAJ,EAAc,OAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEd,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACyB,QAAQ,CAACI,MAAV,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,0CAEE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAGJ,QAAQ,CAAC1B,KAAD,CAAlC;AAA4C,MAAA,SAAS,EAAG6B,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAJJ,EASG,CAACF,WAAW,KAAK,CAAhB,IAAqBC,aAAtB,KACC;AACA,MAAA,SAAS,EAAC,UADV;AAEE,MAAA,OAAO,EAAG,KAAK/B,kBAFjB;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,qBAAY,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,CADF;AAsBD;;AA7EgC;;AAgFnCH,UAAU,CAACqC,SAAX,GAAuB;AACrB5B,EAAAA,aAAa,EAAEjB,SAAS,CAAC8C,IAAV,CAAeC,UADT;AAErBP,EAAAA,QAAQ,EAAExC,SAAS,CAACgD,OAAV,CAAkBhD,SAAS,CAACiD,MAA5B,EAAoCF,UAFzB;AAGrB7B,EAAAA,KAAK,EAAElB,SAAS,CAACkD,MAAV,CAAiBH,UAHH;AAIrBL,EAAAA,aAAa,EAAE1C,SAAS,CAACmD,IAAV,CAAeJ,UAJT;AAKrBN,EAAAA,WAAW,EAAEzC,SAAS,CAACoD,MAAV,CAAiBL,UALT;AAMrBb,EAAAA,KAAK,EAAElC,SAAS,CAAC8C,IAAV,CAAeC,UAND;AAOrBZ,EAAAA,SAAS,EAAEnC,SAAS,CAAC8C,IAAV,CAAeC,UAPL;AAQrB1B,EAAAA,IAAI,EAAErB,SAAS,CAACkD,MAAV,CAAiBH,UARF;AASrBxB,EAAAA,KAAK,EAAEvB,SAAS,CAACoD,MAAV,CAAiBL,UATH;AAUrBzB,EAAAA,QAAQ,EAAEtB,SAAS,CAACkD,MAAV,CAAiBH,UAVN;AAWrB5B,EAAAA,QAAQ,EAAEnB,SAAS,CAACqD,KAAV,CAAgBC,MAAhB,EAAwBP;AAXb,CAAvB;;AAcA,MAAMQ,eAAe,GAAI1C,KAAD,KAAY;AAClC2B,EAAAA,QAAQ,EAAE3B,KAAK,CAAC2C,IAAN,CAAWhB,QADa;AAElCtB,EAAAA,KAAK,EAAEL,KAAK,CAAC4C,IAAN,CAAWvC,KAFgB;AAGlCwB,EAAAA,aAAa,EAAE7B,KAAK,CAAC6C,IAAN,CAAWhB,aAHQ;AAIlCD,EAAAA,WAAW,EAAE5B,KAAK,CAAC6C,IAAN,CAAWjB,WAJU;AAKlCpB,EAAAA,IAAI,EAAER,KAAK,CAAC4C,IAAN,CAAWpC,IALiB;AAMlCE,EAAAA,KAAK,EAAEV,KAAK,CAAC4C,IAAN,CAAWlC,KANgB;AAOlCD,EAAAA,QAAQ,EAAET,KAAK,CAAC4C,IAAN,CAAWnC,QAPa;AAQlCH,EAAAA,QAAQ,EAAEN,KAAK,CAAC2C,IAAN,CAAWrC;AARa,CAAZ,CAAxB;;AAWA,MAAMwC,kBAAkB,GAAIC,QAAD,KAAe;AACxC3C,EAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqByC,QAAQ,CAAC1D,mBAAmB,CAACgB,KAAD,EAAQC,QAAR,CAApB,CADJ;AAExC0C,EAAAA,SAAS,EAAE,MAAMD,QAAQ,CAACzD,SAAS,EAAV,CAFe;AAGxC+B,EAAAA,KAAK,EAAE,MAAM0B,QAAQ,CAACxD,WAAW,EAAZ,CAHmB;AAIxC+B,EAAAA,SAAS,EAAE,MAAMyB,QAAQ,CAACvD,mBAAmB,EAApB;AAJe,CAAf,CAA3B;;AAOA,eAAeN,OAAO,CAACwD,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CnD,UAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport '../Style/Controller.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { actionFetchGameData,\n  pauseTime,\n  actionStart,\n  actionResetGameData } from '../actions';\nimport Questions from './Questions';\nimport Loading from './Loading';\n\nclass Controller extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNextQuestion = this.handleNextQuestion.bind(this);\n\n    this.state = {\n      count: 0,\n      redirect: false,\n    };\n  }\n\n  componentDidMount() {\n    const { fetchGameData, token, settings } = this.props;\n    fetchGameData(token, settings);\n  }\n\n  handleLocalStora() {\n    const { name, gravatar, score } = this.props;\n    const newPlayer = { name, score, picture: gravatar };\n    const playerData = localStorage.getItem('ranking');\n\n    if (playerData) {\n      let playerArr = JSON.parse(playerData);\n      playerArr = [...playerArr, newPlayer];\n      localStorage.setItem('ranking', JSON.stringify(playerArr));\n    } else {\n      const playerArr = [newPlayer];\n      localStorage.setItem('ranking', JSON.stringify(playerArr));\n    }\n  }\n\n  handleNextQuestion() {\n    const { start, resetGame } = this.props;\n    const { count } = this.state;\n    const NUMBER = 4;\n\n    if (count === NUMBER) {\n      resetGame();\n      this.handleLocalStora();\n      this.setState({ redirect: true });\n    }\n\n    this.setState((prev) => ({\n      count: prev.count + 1,\n    }));\n\n    start();\n  }\n\n  render() {\n    const { gameData, currentTime, isTimerPaused } = this.props;\n    const { count, startTime, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/feedback\" />;\n\n    return (\n      <div className=\"controller\">\n        {!gameData.length ? (\n          <Loading />\n        ) : (\n          <>\n            {/* <Timer count={ count } /> */}\n            <Questions questionData={ gameData[count] } startTime={ startTime } />\n          </>\n        )}\n        {(currentTime === 0 || isTimerPaused) && (\n          <button\n          className=\"btn-next\"\n            onClick={ this.handleNextQuestion }\n            type=\"button\"\n            data-testid=\"btn-next\"\n          >\n            Next\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nController.propTypes = {\n  fetchGameData: PropTypes.func.isRequired,\n  gameData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  token: PropTypes.string.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  start: PropTypes.func.isRequired,\n  resetGame: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatar: PropTypes.string.isRequired,\n  settings: PropTypes.shape(Object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  gameData: state.game.gameData,\n  token: state.user.token,\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime,\n  name: state.user.name,\n  score: state.user.score,\n  gravatar: state.user.gravatar,\n  settings: state.game.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchGameData: (token, settings) => dispatch(actionFetchGameData(token, settings)),\n  stopTimer: () => dispatch(pauseTime()),\n  start: () => dispatch(actionStart()),\n  resetGame: () => dispatch(actionResetGameData()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controller);\n"]},"metadata":{},"sourceType":"module"}