{"ast":null,"code":"import _objectSpread from \"/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport '../Style/Questions.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionSaveScore, pauseTime } from '../actions';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.savePlayerInfos = this.savePlayerInfos.bind(this);\n    this.changeText = this.changeText.bind(this);\n  }\n\n  onClick({\n    target\n  }) {\n    const stopTimer = this.props.stopTimer;\n    stopTimer();\n\n    if (target.name === 'correct-answer') {\n      this.calculateScore();\n    }\n  }\n\n  calculateScore() {\n    const _this$props = this.props,\n          questionData = _this$props.questionData,\n          currentTime = _this$props.currentTime,\n          saveScore = _this$props.saveScore;\n    let difficult = 0;\n    const hardValue = 3;\n    const baseValue = 10;\n\n    switch (questionData.difficulty) {\n      case 'hard':\n        difficult = hardValue;\n        break;\n\n      case 'medium':\n        difficult = 2;\n        break;\n\n      case 'easy':\n        difficult = 1;\n        break;\n\n      default:\n        difficult = 0;\n        break;\n    }\n\n    const questionScore = baseValue + currentTime * difficult;\n    saveScore(questionScore);\n    this.savePlayerInfos(questionScore);\n  }\n\n  savePlayerInfos(questionScore) {\n    const newPlayer = JSON.parse(localStorage.getItem('state'));\n    const _newPlayer$player = newPlayer.player,\n          score = _newPlayer$player.score,\n          assertions = _newPlayer$player.assertions;\n    const newInfos = {\n      player: _objectSpread({}, newPlayer.player, {\n        score: score + questionScore,\n        assertions: assertions + 1\n      })\n    };\n    localStorage.setItem('state', JSON.stringify(newInfos));\n  }\n\n  changeText(text) {\n    return {\n      __html: text\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          questionData = _this$props2.questionData,\n          isTimerPaused = _this$props2.isTimerPaused,\n          currentTime = _this$props2.currentTime;\n    const question = questionData.question;\n    const newAnswers = [questionData.correct_answer, ...questionData.incorrect_answers];\n    return React.createElement(\"div\", {\n      className: \"question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-text\" // dangerouslySetInnerHTML={ this.changeText(question) }\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, ' ', question), newAnswers.sort().map((item, index) => item === questionData.correct_answer ? React.createElement(\"button\", {\n      key: index,\n      type: \"button\",\n      name: \"correct-answer\",\n      \"data-testid\": \"correct-answer\",\n      className: isTimerPaused ? 'correct-answer' : '',\n      onClick: this.onClick,\n      disabled: isTimerPaused || currentTime === 0 //  dangerouslySetInnerHTML={ this.changeText(item) }\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, ' ', item, ' ') : React.createElement(\"button\", {\n      key: index,\n      type: \"button\",\n      name: \"wrong-answer\",\n      \"data-testid\": `wrong-answer-${index}`,\n      className: isTimerPaused ? 'wrong-answer' : '',\n      onClick: this.onClick,\n      disabled: isTimerPaused || currentTime === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, item)));\n  }\n\n}\n\nQuestions.propTypes = {\n  questionData: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf.isRequired,\n    difficulty: PropTypes.string.isRequired\n  }).isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  saveScore: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime\n});\n\nconst mapDispatchToProps = dispatch => ({\n  stopTimer: () => dispatch(pauseTime()),\n  saveScore: score => dispatch(actionSaveScore(score))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Questions.jsx"],"names":["React","Component","PropTypes","connect","actionSaveScore","pauseTime","Questions","constructor","props","onClick","bind","calculateScore","savePlayerInfos","changeText","target","stopTimer","name","questionData","currentTime","saveScore","difficult","hardValue","baseValue","difficulty","questionScore","newPlayer","JSON","parse","localStorage","getItem","player","score","assertions","newInfos","setItem","stringify","text","__html","render","isTimerPaused","question","newAnswers","correct_answer","incorrect_answers","sort","map","item","index","propTypes","shape","category","string","isRequired","arrayOf","bool","func","number","mapStateToProps","state","time","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../Style/Questions.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionSaveScore, pauseTime } from '../actions';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.savePlayerInfos = this.savePlayerInfos.bind(this);\n    this.changeText = this.changeText.bind(this);\n  }\n\n  onClick({ target }) {\n    const { stopTimer } = this.props;\n    stopTimer();\n    if (target.name === 'correct-answer') {\n      this.calculateScore();\n    }\n  }\n\n  calculateScore() {\n    const { questionData, currentTime, saveScore } = this.props;\n    let difficult = 0;\n    const hardValue = 3;\n    const baseValue = 10;\n    switch (questionData.difficulty) {\n    case ('hard'):\n      difficult = hardValue;\n      break;\n    case ('medium'):\n      difficult = 2;\n      break;\n    case ('easy'):\n      difficult = 1;\n      break;\n    default:\n      difficult = 0;\n      break;\n    }\n    const questionScore = baseValue + (currentTime * difficult);\n    saveScore(questionScore);\n    this.savePlayerInfos(questionScore);\n  }\n\n  savePlayerInfos(questionScore) {\n    const newPlayer = JSON.parse(localStorage.getItem('state'));\n    const { score, assertions } = newPlayer.player;\n    const newInfos = {\n      player: {\n        ...newPlayer.player,\n        score: score + questionScore,\n        assertions: assertions + 1,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(newInfos));\n  }\n\n  changeText(text) {\n    return { __html: text };\n  }\n\n  render() {\n    const { questionData, isTimerPaused, currentTime } = this.props;\n    const { question } = questionData;\n    const newAnswers = [questionData.correct_answer, ...questionData.incorrect_answers];\n    return (\n      <div className=\"question\">\n        {/* <h4 data-testid=\"question-category\">{category}</h4> */}\n        <h3\n          data-testid=\"question-text\"\n          // dangerouslySetInnerHTML={ this.changeText(question) }\n        >\n          {' '}\n          {question}\n        </h3>\n\n        {newAnswers.sort().map((item, index) => (item === questionData.correct_answer ? (\n          <button\n            key={ index }\n            type=\"button\"\n            name=\"correct-answer\"\n            data-testid=\"correct-answer\"\n            className={ isTimerPaused ? 'correct-answer' : '' }\n            onClick={ this.onClick }\n            disabled={ isTimerPaused || currentTime === 0 }\n          //  dangerouslySetInnerHTML={ this.changeText(item) }\n          >\n            {' '}\n            {item}\n            {' '}\n\n          </button>\n\n        ) : (\n          <button\n            key={ index }\n            type=\"button\"\n            name=\"wrong-answer\"\n            data-testid={ `wrong-answer-${index}` }\n            className={ isTimerPaused ? 'wrong-answer' : '' }\n            onClick={ this.onClick }\n            disabled={ isTimerPaused || currentTime === 0 }\n          >\n            {item}\n          </button>\n        )\n        ))}\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  questionData: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf.isRequired,\n    difficulty: PropTypes.string.isRequired,\n  }).isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  saveScore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  stopTimer: () => dispatch(pauseTime()),\n  saveScore: (score) => dispatch(actionSaveScore(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}