{"ast":null,"code":"var _jsxFileName = \"/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Timer.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setTimer } from '../actions';\n\nclass Timer extends Component {\n  componentDidMount() {\n    this.handleTimer();\n  }\n\n  componentDidUpdate() {\n    const _this$props = this.props,\n          currentTime = _this$props.currentTime,\n          isTimerPaused = _this$props.isTimerPaused,\n          reestart = _this$props.reestart; // const maxQuestions = 4;\n\n    if (currentTime === 0 || isTimerPaused) {\n      clearInterval(this.timer);\n    }\n\n    if (reestart) {\n      this.handleTimer();\n    }\n  }\n\n  handleTimer() {\n    const decrementTime = this.props.decrementTime;\n    const oneSec = 1000;\n    this.timer = setInterval(() => {\n      decrementTime();\n    }, oneSec);\n  }\n\n  render() {\n    const currentTime = this.props.currentTime;\n    return React.createElement(\"div\", {\n      className: \"timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Timer:\", currentTime);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state.time.currentTime,\n  isTimerPaused: state.time.isTimerPaused,\n  reestart: state.time.reestart\n});\n\nconst mapDispatchToProps = dispatch => ({\n  decrementTime: () => dispatch(setTimer())\n});\n\nTimer.propTypes = {\n  currentTime: PropTypes.number.isRequired,\n  decrementTime: PropTypes.func.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  reestart: PropTypes.bool.isRequired // count: PropTypes.number.isRequired,\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","map":{"version":3,"sources":["/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Timer.jsx"],"names":["React","Component","PropTypes","connect","setTimer","Timer","componentDidMount","handleTimer","componentDidUpdate","props","currentTime","isTimerPaused","reestart","clearInterval","timer","decrementTime","oneSec","setInterval","render","mapStateToProps","state","time","mapDispatchToProps","dispatch","propTypes","number","isRequired","func","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAC5BK,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,WAAL;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AAAA,wBAC8B,KAAKC,KADnC;AAAA,UACXC,WADW,eACXA,WADW;AAAA,UACEC,aADF,eACEA,aADF;AAAA,UACiBC,QADjB,eACiBA,QADjB,EAEnB;;AACA,QAAIF,WAAW,KAAK,CAAhB,IAAqBC,aAAzB,EAAwC;AACtCE,MAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACD;;AAED,QAAIF,QAAJ,EAAc;AACZ,WAAKL,WAAL;AACD;AACF;;AAEDA,EAAAA,WAAW,GAAG;AAAA,UACJQ,aADI,GACc,KAAKN,KADnB,CACJM,aADI;AAEZ,UAAMC,MAAM,GAAG,IAAf;AACA,SAAKF,KAAL,GAAaG,WAAW,CAAC,MAAM;AAC7BF,MAAAA,aAAa;AACd,KAFuB,EAErBC,MAFqB,CAAxB;AAGD;;AAEDE,EAAAA,MAAM,GAAG;AAAA,UACCR,WADD,GACiB,KAAKD,KADtB,CACCC,WADD;AAGP,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEGA,WAFH,CADF;AAKD;;AAjC2B;;AAoC9B,MAAMS,eAAe,GAAIC,KAAD,KAAY;AAClCV,EAAAA,WAAW,EAAEU,KAAK,CAACC,IAAN,CAAWX,WADU;AAElCC,EAAAA,aAAa,EAAES,KAAK,CAACC,IAAN,CAAWV,aAFQ;AAGlCC,EAAAA,QAAQ,EAAEQ,KAAK,CAACC,IAAN,CAAWT;AAHa,CAAZ,CAAxB;;AAMA,MAAMU,kBAAkB,GAAIC,QAAD,KAAe;AACxCR,EAAAA,aAAa,EAAE,MAAMQ,QAAQ,CAACnB,QAAQ,EAAT;AADW,CAAf,CAA3B;;AAIAC,KAAK,CAACmB,SAAN,GAAkB;AAChBd,EAAAA,WAAW,EAAER,SAAS,CAACuB,MAAV,CAAiBC,UADd;AAEhBX,EAAAA,aAAa,EAAEb,SAAS,CAACyB,IAAV,CAAeD,UAFd;AAGhBf,EAAAA,aAAa,EAAET,SAAS,CAAC0B,IAAV,CAAeF,UAHd;AAIhBd,EAAAA,QAAQ,EAAEV,SAAS,CAAC0B,IAAV,CAAeF,UAJT,CAKhB;;AALgB,CAAlB;AAQA,eAAevB,OAAO,CAACgB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjB,KAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setTimer } from '../actions';\n\nclass Timer extends Component {\n  componentDidMount() {\n    this.handleTimer();\n  }\n\n  componentDidUpdate() {\n    const { currentTime, isTimerPaused, reestart } = this.props;\n    // const maxQuestions = 4;\n    if (currentTime === 0 || isTimerPaused) {\n      clearInterval(this.timer);\n    }\n\n    if (reestart) {\n      this.handleTimer();\n    }\n  }\n\n  handleTimer() {\n    const { decrementTime } = this.props;\n    const oneSec = 1000;\n    this.timer = setInterval(() => {\n      decrementTime();\n    }, oneSec);\n  }\n\n  render() {\n    const { currentTime } = this.props;\n\n    return (\n      <div className=\"timer\">\n        Timer:\n        {currentTime}\n      </div>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentTime: state.time.currentTime,\n  isTimerPaused: state.time.isTimerPaused,\n  reestart: state.time.reestart,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  decrementTime: () => dispatch(setTimer()),\n});\n\nTimer.propTypes = {\n  currentTime: PropTypes.number.isRequired,\n  decrementTime: PropTypes.func.isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  reestart: PropTypes.bool.isRequired,\n  // count: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n"]},"metadata":{},"sourceType":"module"}