{"ast":null,"code":"import _objectSpread from \"/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionSaveScore, pauseTime } from '../actions'; // import Timer from './Timer';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.savePlayerInfos = this.savePlayerInfos.bind(this);\n  }\n\n  onClick({\n    target\n  }) {\n    const stopTimer = this.props.stopTimer;\n    stopTimer();\n\n    if (target.name === 'correct-answer') {\n      this.calculateScore();\n    }\n  }\n\n  calculateScore() {\n    const _this$props = this.props,\n          questionData = _this$props.questionData,\n          currentTime = _this$props.currentTime,\n          saveScore = _this$props.saveScore;\n    let difficult = 0;\n    const hardValue = 3;\n    const baseValue = 10;\n\n    switch (questionData.difficulty) {\n      case 'hard':\n        difficult = hardValue;\n        break;\n\n      case 'medium':\n        difficult = 2;\n        break;\n\n      case 'easy':\n        difficult = 1;\n        break;\n\n      default:\n        difficult = 0;\n        break;\n    }\n\n    const questionScore = baseValue + currentTime * difficult;\n    saveScore(questionScore);\n    this.savePlayerInfos(questionScore);\n  }\n\n  savePlayerInfos(questionScore) {\n    const newPlayer = JSON.parse(localStorage.getItem('state'));\n    const _newPlayer$player = newPlayer.player,\n          score = _newPlayer$player.score,\n          assertions = _newPlayer$player.assertions;\n    const newInfos = {\n      player: _objectSpread({}, newPlayer.player, {\n        score: score + questionScore,\n        assertions: assertions + 1\n      })\n    };\n    localStorage.setItem('state', JSON.stringify(newInfos));\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          questionData = _this$props2.questionData,\n          isTimerPaused = _this$props2.isTimerPaused,\n          currentTime = _this$props2.currentTime;\n    const category = questionData.category,\n          question = questionData.question;\n    const newAnswers = [questionData.correct_answer, ...questionData.incorrect_answers];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, category), React.createElement(\"h3\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, question), newAnswers.sort().map((item, index) => item === questionData.correct_answer ? React.createElement(\"button\", {\n      key: index,\n      type: \"button\",\n      name: \"correct-answer\",\n      \"data-testid\": \"correct-answer\",\n      className: isTimerPaused ? 'correct-answer' : '',\n      onClick: this.onClick,\n      disabled: isTimerPaused || currentTime === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, item) : React.createElement(\"button\", {\n      key: index,\n      type: \"button\",\n      name: \"wrong-answer\",\n      \"data-testid\": `wrong-answer-${index}`,\n      className: isTimerPaused ? 'wrong-answer' : '',\n      onClick: this.onClick,\n      disabled: isTimerPaused || currentTime === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, item)));\n  }\n\n}\n\nQuestions.propTypes = {\n  questionData: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf.isRequired,\n    difficulty: PropTypes.string.isRequired\n  }).isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  saveScore: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime\n});\n\nconst mapDispatchToProps = dispatch => ({\n  stopTimer: () => dispatch(pauseTime()),\n  saveScore: score => dispatch(actionSaveScore(score))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/mariana/Documentos/projeto/sd-010-b-project-trivia-react-redux/src/Components/Questions.jsx"],"names":["React","Component","PropTypes","connect","actionSaveScore","pauseTime","Questions","constructor","props","onClick","bind","calculateScore","savePlayerInfos","target","stopTimer","name","questionData","currentTime","saveScore","difficult","hardValue","baseValue","difficulty","questionScore","newPlayer","JSON","parse","localStorage","getItem","player","score","assertions","newInfos","setItem","stringify","render","isTimerPaused","category","question","newAnswers","correct_answer","incorrect_answers","sort","map","item","index","propTypes","shape","string","isRequired","arrayOf","bool","func","number","mapStateToProps","state","time","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionSaveScore, pauseTime } from '../actions';\n// import Timer from './Timer';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.savePlayerInfos = this.savePlayerInfos.bind(this);\n  }\n\n  onClick({ target }) {\n    const { stopTimer } = this.props;\n    stopTimer();\n    if (target.name === 'correct-answer') {\n      this.calculateScore();\n    }\n  }\n\n  calculateScore() {\n    const { questionData, currentTime, saveScore } = this.props;\n    let difficult = 0;\n    const hardValue = 3;\n    const baseValue = 10;\n    switch (questionData.difficulty) {\n    case ('hard'):\n      difficult = hardValue;\n      break;\n    case ('medium'):\n      difficult = 2;\n      break;\n    case ('easy'):\n      difficult = 1;\n      break;\n    default:\n      difficult = 0;\n      break;\n    }\n    const questionScore = baseValue + (currentTime * difficult);\n    saveScore(questionScore);\n    this.savePlayerInfos(questionScore);\n  }\n\n  savePlayerInfos(questionScore) {\n    const newPlayer = JSON.parse(localStorage.getItem('state'));\n    const { score, assertions } = newPlayer.player;\n    const newInfos = {\n      player: {\n        ...newPlayer.player,\n        score: score + questionScore,\n        assertions: assertions + 1,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(newInfos));\n  }\n\n  render() {\n    const { questionData, isTimerPaused, currentTime } = this.props;\n    const { category, question } = questionData;\n    const newAnswers = [questionData.correct_answer, ...questionData.incorrect_answers];\n    return (\n      <div>\n\n        <h4 data-testid=\"question-category\">{category}</h4>\n        <h3 data-testid=\"question-text\">{question}</h3>\n        {newAnswers.sort().map((item, index) => (item === questionData.correct_answer ? (\n          <button\n            key={ index }\n            type=\"button\"\n            name=\"correct-answer\"\n            data-testid=\"correct-answer\"\n            className={ isTimerPaused ? 'correct-answer' : '' }\n            onClick={ this.onClick }\n            disabled={ isTimerPaused || currentTime === 0 }\n          >\n            {item}\n          </button>\n        ) : (\n          <button\n            key={ index }\n            type=\"button\"\n            name=\"wrong-answer\"\n            data-testid={ `wrong-answer-${index}` }\n            className={ isTimerPaused ? 'wrong-answer' : '' }\n            onClick={ this.onClick }\n            disabled={ isTimerPaused || currentTime === 0 }\n          >\n            {item}\n          </button>\n        )\n        ))}\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  questionData: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf.isRequired,\n    difficulty: PropTypes.string.isRequired,\n  }).isRequired,\n  isTimerPaused: PropTypes.bool.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  saveScore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isTimerPaused: state.time.isTimerPaused,\n  currentTime: state.time.currentTime,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  stopTimer: () => dispatch(pauseTime()),\n  saveScore: (score) => dispatch(actionSaveScore(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}